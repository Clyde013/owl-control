use std::{collections::HashMap, sync::LazyLock};

static CODE_KEY_MAP: LazyLock<HashMap<&str, u16>> = LazyLock::new(|| {
    [
        (27, "escape"),
        (96, "backquote"),
        (49, "1"),
        (50, "2"),
        (51, "3"),
        (52, "4"),
        (53, "5"),
        (54, "6"),
        (55, "7"),
        (56, "8"),
        (57, "9"),
        (48, "0"),
        (45, "minus"),
        (61, "equals"),
        (8, "backspace"),
        (9, "tab"),
        (16, "lshift"),
        (17, "lctrl"),
        (18, "lalt"),
        (65, "a"),
        (66, "b"),
        (67, "c"),
        (68, "d"),
        (69, "e"),
        (70, "f"),
        (71, "g"),
        (72, "h"),
        (73, "i"),
        (74, "j"),
        (75, "k"),
        (76, "l"),
        (77, "m"),
        (78, "n"),
        (79, "o"),
        (80, "p"),
        (81, "q"),
        (82, "r"),
        (83, "s"),
        (84, "t"),
        (85, "u"),
        (86, "v"),
        (87, "w"),
        (88, "x"),
        (89, "y"),
        (90, "z"),
        (91, "open_bracket"),
        (93, "close_bracket"),
        (92, "back_slash"),
        (59, "semicolon"),
        (39, "quote"),
        (13, "enter"),
        (44, "comma"),
        (46, "period"),
        (47, "slash"),
        (32, "space"),
        (112, "f1"),
        (113, "f2"),
        (114, "f3"),
        (115, "f4"),
        (116, "f5"),
        (117, "f6"),
        (118, "f7"),
        (119, "f8"),
        (120, "f9"),
        (121, "f10"),
        (122, "f11"),
        (123, "f12"),
    ]
    .into_iter()
    .map(|(code, key)| (key, code))
    .collect()
});

pub(crate) fn lookup_keycode(key: &str) -> Option<u16> {
    CODE_KEY_MAP.get(&key.to_lowercase().as_str()).copied()
}
